{"name":"Parabench","tagline":"A parallel and programmable benchmark for POSIX and MPI-IO","body":"Parabench\r\n=========\r\n\r\nA parallel and programmable benchmark for POSIX and MPI-IO\r\n\r\n\r\nDependencies\r\n------------\r\n```\r\nflex, bison, glib2, mpi\r\n```\r\nMPICH2 is recommended. Not tested against Open MPI.\r\n\r\n\r\nBuilding\r\n--------\r\nTo build the release target, run:\r\n```\r\n./waf configure [--with-mpicc=<BIN Name>] [--prefix=<WHERE>] [--target=<LIST>]\r\n./waf [build]\r\n./waf install\r\n```\r\nThe binaries are placed in the `build` directory.\r\n\r\n\r\nAlternative targets\r\n-------------------\r\nThere are more targets available next to `release`, which are `debug`and `gen`. To additionally build these optional targets, specify them when running configure, e.g.:\r\n```\r\n./waf configure --target=debug,gen\r\n./waf\r\n```\r\nFor each target, there will be one directory in the `build` folder. When the `gen` target is specified, each folder will have a sub-folder `gen` containing the binaries for the generated version of the respective target, e.g. `build/debug/gen` for the generated verion of the debug target.\r\n\r\n**Note:** When using the `gen` target, then `./waf build` needs to be run twice in order to make waf recognize the generated files.\r\n\r\n\r\nParabench Programming Language (PBL)\r\n------------------------------------\r\nParabench is designed to execute specific application I/O behaviour using I/O kernels defined in a custom scripting language. Example kernels can be found in the `examples` folder. A more detailed documentation for the language features will follow in the future.\r\n\r\n\r\nPreprocessor\r\n------------\r\nThe preprocessor is responsible for integrating the I/O modules defined in the `modules` folder. To run the preprocessor, specify the `gen` target when running configure. For each module, an I/O command is made available in the PBL language. For instance, with the `dread.c` module, a `dread` command is available and can be used when writing I/O kernels. The parameters for those calls directly correspond to the C-function signature. In case of `dread`, a string is expected as single parameter. Examples usage of the provided modules `dread` and `dwrite` is given in the `examples/directio.pbl` kernels.\r\n\r\nTo clean the generated code use `.waf ppc_clean`.\r\n\r\n\r\nLicense\r\n-------\r\nParabench is licensed under GPLv3. Please find a copy in the `LICENSE` file.\r\n\r\n\r\nAcknowledgments\r\n---------------\r\nThanks to the following persons who participated improvements and fixes to the codebase:\r\n\r\n* Julian Kunkel\r\n* Michael Kuhn\r\n\r\n","google":"UA-37257659-1","note":"Don't delete this file! It's used internally to help with page regeneration."}